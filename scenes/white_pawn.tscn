[gd_scene load_steps=4 format=3 uid="uid://bjriwkg1e4yoo"]

[ext_resource type="Texture2D" uid="uid://bdqtn16oky3qn" path="res://assets/WhitePieces.png" id="1_lw7fq"]

[sub_resource type="GDScript" id="GDScript_b6c53"]
resource_name = "white_pawn"
script/source = "extends Area2D

var is_selected = false
@export var position_on_grid = Vector2i.ZERO
var is_hovered = false
var just_moved = false
enum Piece_type {PAWN = 0, ROOK = 1, KNIGHT = 2, BISHOP = 3, QUEEN = 4, KING = 5}
enum Piece_colour {WHITE = 0, BLACK = -1}
var piece_type 
var colour
const TILE_SIZE = 16

signal piece_selected(Area2D)
@onready var board:Node2D = get_parent()
@onready var tilemap: TileMap = get_parent().get_node(\"TileMap\")
@onready var collider: CollisionShape2D = $CollisionShape2D
@onready var highlight_map:= get_parent().get_node(\"Highlight\")
@onready var sprite := $Sprite2D

		

	
# setter to set selected to false
func _unselect() -> void:
	is_selected = false
	sprite.modulate = Color(1,1,1)
	
#setter to set selected to trye
func _select() -> void:
	is_selected = true
	
#getter for piece_tupe
func _get_piece_type() -> int:
	return piece_type
	
#setter for piece_type
func _set_piece_type(type: int):
	piece_type = type

#getter for piece colour
func get_colour()->int:
	return colour

#setter for piece colour
func set_colour(color: int):
	colour = color
	
#setter for intial position
func intial_pos_setter(pos: Vector2i) -> void:
	position_on_grid = pos
	
func get_pos()->Vector2i:
	return position_on_grid

func get_collider()->CollisionShape2D:
	return collider
	
#function to handle input handling for mouse clicks


func _ready() -> void:
	_set_piece_type(Piece_type.PAWN)
	set_colour(Piece_colour.WHITE)

func try_move_to(target_tile: Vector2i, tile_pos: Vector2)-> bool:
	var dx = target_tile.x - position_on_grid.x
	var dy = target_tile.y - position_on_grid.y
	var direction = -1 if colour == Piece_colour.BLACK else 1
	if is_selected:
		if dx == 0 and dy == direction:
			just_moved = true
			position_on_grid = target_tile
			global_position = tile_pos
			print(\"Moved white pawn to \", position_on_grid, \" (world position: \", global_position, \")\")
			highlight_map.clear()
			sprite.modulate = Color(1,1,1)
			return true
		elif (dx == 0 and dy == 2 and position_on_grid.y == 1 and is_cleared(target_tile, position_on_grid)):
			just_moved = true
			position_on_grid = target_tile
			global_position = tile_pos
			print(\"Moved white pawn to \", position_on_grid, \" (world position: \", global_position, \")\")
			sprite.modulate = Color(1,1,1)
			highlight_map.clear()
			return true
	print(\"Invalid move\")
	highlight_map.clear()
	sprite.modulate = Color(1,1,1)
	return false
	

func try_pawn_take_over(target_tile: Vector2i, tile_pos: Vector2) -> bool:
	var dx = abs(target_tile.x - position_on_grid.x)
	var dy = target_tile.y - position_on_grid.y
	if is_selected and dx == 1 and dy == 1:
		just_moved = true
		position_on_grid = target_tile
		global_position = tile_pos
		print(\"white pawn takes over piece at \", position_on_grid)
		sprite.modulate = Color(1,1,1)
		highlight_map.clear()
		return true
	else:
		print(\"Invalid move\")
		sprite.modulate = Color(1,1,1)
		highlight_map.clear()
		return false
		
#todo:
#tidy up code
#implement moving diagnolly during takeovers 
#implement hashmap for tile tracking
#implement en passant
#idea to implement take over if a piece of a different colour occupies the same space as piece of another colour remove the piece

func promotion(target_tile: Vector2i, tile_pos:Vector2, index:int) -> Area2D:
	if position_on_grid.y == 7:
		var piece_unloaded
		var text
		match index:
			0:
				piece_unloaded = preload(\"res://scenes/white_queen.tscn\")
				text = \"White Queen\"
			1: 
				piece_unloaded = preload(\"res://scenes/white_rook.tscn\")
				text = \"White Rook\"
			2:
				piece_unloaded = preload(\"res://scenes/white_knight.tscn\")
				text = \"White Knight\"
			3: 
				piece_unloaded = preload(\"res://scenes/white_bishop.tscn\")
				text = \"White Bishop\"
			_: print(\"error couldn't load a scene\")
		var piece = piece_unloaded.instantiate()
		board.add_child(piece)
		piece.global_position = tile_pos
		piece.intial_pos_setter(target_tile)
		piece.connect(\"mouse_entered\", Callable(piece, \"_on_mouse_entered\"))
		piece.connect(\"mouse_exited\", Callable(piece,\"_on_mouse_exited\"))
		piece.connect(\"piece_selected\", Callable(board, \"_on_piece_selected\"))
		piece.input_pickable = true
		piece.just_moved = true
		self.visible = false
		collider.disabled = true
		print(\"white pawn promoted to white \", text,  \"\")
		return piece
	else:
		return null


func _on_mouse_entered() -> void:
	is_hovered = true
	print(\"one\")


func _on_mouse_exited() -> void:
	is_hovered = false
	print(\"zero\")


func _on_input_event(viewport: Node, event: InputEvent, shape_idx: int) -> void:
	if board.input_lock:
		return
	if just_moved:
		just_moved = false
		return
	if is_hovered and event is InputEventMouseButton:
		if not is_selected: 
			var mouse_event := event as InputEventMouseButton
			if mouse_event.button_index== MOUSE_BUTTON_LEFT and mouse_event.pressed:
				is_selected = true
				sprite.modulate = Color(1,1,0)
				var legal_moves = get_moves()
				highlight_map.show_light(legal_moves)
				emit_signal(\"piece_selected\", self)
				print(\"white pawn selected at tile: \", position_on_grid)
				
				
				
func is_cleared(target_tile: Vector2i, current_pos: Vector2i) -> bool:
	var direction_vec = (target_tile - current_pos).sign()
	var current = current_pos + direction_vec
	var occupied = board.get_occupied()
	while current != target_tile:
		if occupied[current] != null:
			return false
		current += direction_vec
	return true
	
	
func get_moves()->Array:
	var moves = []
	var direction = 1
	var ahead = position_on_grid + Vector2i(0, direction)
	var occupied = board.get_occupied()
	if occupied[ahead] == null:
		moves.append(tilemap.map_to_local(ahead))
	
	var ahead2 = ahead + Vector2i(0, direction)
	if position_on_grid.y == 1 and occupied[ahead] == null and occupied[ahead2] == null:
		
		moves.append(tilemap.map_to_local(ahead2))
		
	for dx in [1,-1]:
		var diagnol = position_on_grid + Vector2i(dx, direction)
		if (diagnol.x < 0 or diagnol.x > 7 or diagnol.y <0 or diagnol.y > 7):
			continue
		var piece = occupied[diagnol]
		if piece != null and piece.get_colour() != self.colour:
			moves.append(tilemap.map_to_local(diagnol))
			
	return moves
	
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_5xhjb"]
size = Vector2(12, 12)

[node name="white_pawn" type="Area2D"]
script = SubResource("GDScript_b6c53")

[node name="Sprite2D" type="Sprite2D" parent="."]
texture = ExtResource("1_lw7fq")
region_enabled = true
region_rect = Rect2(0, 0, 16, 16)

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_5xhjb")

[connection signal="input_event" from="." to="." method="_on_input_event"]
[connection signal="mouse_entered" from="." to="." method="_on_mouse_entered"]
[connection signal="mouse_exited" from="." to="." method="_on_mouse_exited"]
